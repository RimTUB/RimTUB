name: Manual Release + API Sync

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g. 2.2.2-1)"
        required: true
      version_tuple:
        description: "Release version tuple (e.g. (2, 2, 2, 'release', 1))"

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Update VERSION & VERSION_TUPLE in utils/config/default_config.py
        env:
          VERSION: ${{ github.event.inputs.version }}               # e.g. 2.2.2-1
          VERSION_TUPLE: ${{ github.event.inputs.version_tuple }}   # e.g. (2, 2, 2, 'release', 1)
        run: |
          python - <<'PY'
          import os, re, pathlib
          
          file = "utils/config/default_config.py"
          version = os.environ["VERSION"]
          tuple_val = os.environ["VERSION_TUPLE"]
          
          text = pathlib.Path(file).read_text()
          
          text = re.sub(r'^([ \t]*)VERSION\s*=.*$',         r"\1VERSION = '%s'" % version,       text, flags=re.M)
          text = re.sub(r'^([ \t]*)VERSION_TUPLE\s*=.*$',   r"\1VERSION_TUPLE = %s" % tuple_val, text, flags=re.M)
          
          pathlib.Path(file).write_text(text)
          PY

          # ‚îÄ‚îÄ 3. –∫–æ–º–º–∏—Ç–∏–º –∏ –ø—É—à–∏–º ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
          git config user.name  "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add utils/config/default_config.py
          git commit -m "üîñ Bump version to $VERSION"
          git push
      

      - name: Create ZIP archive
        run: |
          zip -r "RimTUB_${{ github.event.inputs.version }}.zip" . -x ".git/*"

      - name: Get previous tag
        id: prevtag
        run: |
          git fetch --tags
          PREV=$(git tag --sort=-creatordate | grep -v "${{ github.event.inputs.version }}" | head -n 1)
          echo "prev=$PREV" >> $GITHUB_OUTPUT

      - name: Read changelog and build final body
        id: changelog
        run: |
          MANUAL_LOG_FILE=".github/RELEASE_LOG.md"
          if [ ! -f "$MANUAL_LOG_FILE" ]; then
            echo "‚ùå $MANUAL_LOG_FILE not found"
            exit 1
          fi

          MANUAL_LOG=$(cat "$MANUAL_LOG_FILE")
          LINK="Full Changelog: [${{ steps.prevtag.outputs.prev }}...${{ github.event.inputs.version }}](https://github.com/${{ github.repository }}/compare/${{ steps.prevtag.outputs.prev }}...${{ github.event.inputs.version }})"

          FINAL_LOG="# RimTUB github.event.inputs.version\n\n## ChangeLog:\n${MANUAL_LOG}\n\n${LINK}"

          echo "log<<EOF" >> $GITHUB_OUTPUT
          echo -e "$FINAL_LOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: ${{ github.event.inputs.version }}
          body: ${{ steps.changelog.outputs.log }}
          files: RimTUB_${{ github.event.inputs.version }}.zip

      - name: Send release info to API
        env:
          API_URL: ${{ secrets.RELEASE_API_URL }}
          API_TOKEN: ${{ secrets.RELEASE_API_TOKEN }}
        run: |
          jq -n --arg version "${{ github.event.inputs.version }}" \
                --arg log "${{ steps.changelog.outputs.log }}" \
                '{version: $version, manual_log: $log}' > payload.json

          curl -X POST "$API_URL" \
            -H "Authorization: Bearer $API_TOKEN" \
            -H "Content-Type: application/json" \
            -d @payload.json
