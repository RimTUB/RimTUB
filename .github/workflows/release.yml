name: Manual Release + API Sync

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g. 2.2.2-1)"
        required: true

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Update VERSION & VERSION_TUPLE in utils/config/default_config.py
        env:
          VERSION: ${{ github.event.inputs.version }}          # e.g. 2.2.2-1
        run: |
          # ── 1. разбираем версию ─────────────────────────────────────────────
          BASE=${VERSION%%-*}          # 2.2.2
          POST=${VERSION#*-}           # 1   (если нет "-", будет вся строка)
          [ "$BASE" = "$VERSION" ] && POST=0   # если пост‑части нет
      
          IFS='.' read -r MAJ MIN PATCH <<< "$BASE"
          TUPLE="($MAJ, $MIN, $PATCH, 'release', $POST)"
          export TUPLE
      
          # ── 2. патчим файл (сохраняем ведущие пробелы/табы) ────────────────
          python - <<'PY'
          import os, re, pathlib
          file = "utils/config/default_config.py"
          version = os.environ["VERSION"]
          tuple_val = os.environ["TUPLE"]
          
          src = pathlib.Path(file).read_text()
          
          src = re.sub(r'^[ \t]*VERSION\s*=.*$',          f"VERSION = '{version}'",     src, flags=re.M)
          src = re.sub(r'^[ \t]*VERSION_TUPLE\s*=.*$',    f"VERSION_TUPLE = {tuple_val}", src, flags=re.M)
          
          pathlib.Path(file).write_text(src)
          PY
      
          # ── 3. коммитим и пушим ────────────────────────────────────────────
          git config user.name  "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add utils/config/default_config.py
          git commit -m "🔖 Bump version to $VERSION"
          git push
      

      - name: Create ZIP archive
        run: |
          zip -r "RimTUB_${{ github.event.inputs.version }}.zip" . -x ".git/*"

      - name: Get previous tag
        id: prevtag
        run: |
          git fetch --tags
          PREV=$(git tag --sort=-creatordate | grep -v "${{ github.event.inputs.version }}" | head -n 1)
          echo "prev=$PREV" >> $GITHUB_OUTPUT

      - name: Read changelog and build final body
        id: changelog
        run: |
          MANUAL_LOG_FILE=".github/RELEASE_LOG.md"
          if [ ! -f "$MANUAL_LOG_FILE" ]; then
            echo "❌ $MANUAL_LOG_FILE not found"
            exit 1
          fi

          MANUAL_LOG=$(cat "$MANUAL_LOG_FILE")
          LINK="Full Changelog: [${{ steps.prevtag.outputs.prev }}...${{ github.event.inputs.version }}](https://github.com/${{ github.repository }}/compare/${{ steps.prevtag.outputs.prev }}...${{ github.event.inputs.version }})"

          FINAL_LOG="# RimTUB github.event.inputs.version\n\n## ChangeLog:\n${MANUAL_LOG}\n\n${LINK}"

          echo "log<<EOF" >> $GITHUB_OUTPUT
          echo -e "$FINAL_LOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: ${{ github.event.inputs.version }}
          body: ${{ steps.changelog.outputs.log }}
          files: RimTUB_${{ github.event.inputs.version }}.zip

      - name: Send release info to API
        env:
          API_URL: ${{ secrets.RELEASE_API_URL }}
          API_TOKEN: ${{ secrets.RELEASE_API_TOKEN }}
        run: |
          jq -n --arg version "${{ github.event.inputs.version }}" \
                --arg log "${{ steps.changelog.outputs.log }}" \
                '{version: $version, manual_log: $log}' > payload.json

          curl -X POST "$API_URL" \
            -H "Authorization: Bearer $API_TOKEN" \
            -H "Content-Type: application/json" \
            -d @payload.json
