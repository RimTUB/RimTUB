import hashlib
from traceback import format_exc, print_exc
from urllib.parse import urlparse
import requests
import shutil
import re
import os

from pyrogram.types import Message
from telebot.types import (
    CallbackQuery as C, 
    InlineQueryResultArticle as RArticle, InputTextMessageContent as TMC,
    InlineKeyboardMarkup as IM, InlineKeyboardButton as IB
)

from ..UserBot import build_module_help_text
from utils import *
from config import DMF_TIMEOUT, DML_TIMEOUT, CHECK_HASH_URL, DML_WHITELIST



helplist.add_module(
    Module(
        __package__,
        description="–í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –º–æ–¥—É–ª–µ–π",
        author="built-in (@RimMirK)",
        version='2.1'
    ).add_command(
        Command(['dmf'], [Arg("–æ—Ç–≤–µ—Ç —Å <u>—Ñ–∞–π–ª–æ–º</u> –º–æ–¥—É–ª—è")], "–°–∫–∞—á–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å")
    ).add_command(
        Command(['sm'], [Arg("–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è")], "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å")
    ).add_command(
        Command(['delm'], [Arg("–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è")], "–£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å")
    ).add_command(
        Command(['relm'], [Arg("–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è")], '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å')
    ).add_command(
        Command(['offm', 'stopm'], [Arg("–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è")], '–í—ã–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å')
    ).add_command(
        Command(['onm', 'startm'], [Arg("–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è")], '–í–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å')
    )
)

def remove_emoji_tags(text):
    return re.sub(r'<emoji[^>]*>(.*?)<\/emoji>', r'\1', text)

async def download_anyway(app: Client, c: C, url):
    return await dml(app, None, lambda text: app.bot.edit_message_text(remove_emoji_tags(text), inline_message_id=c.inline_message_id), url, True)

async def download_anyway_dmf(app: Client, c: C, file_path, name):
    return await dmf(app, None, lambda text: app.bot.edit_message_text(remove_emoji_tags(text), inline_message_id=c.inline_message_id), file_path, name, True)


async def alert(app: Client, i, url):
    await app.bot.answer_inline_query(i.id, [RArticle(0, '.', TMC(
        b("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã –∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ –º–æ–¥—É–ª—å —Å –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞. "
        "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ ‚Äî —Ñ–∞–π–ª –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã. "
        "–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è –º–æ–≥—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —É–≥—Ä–æ–∑—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∞ —Ç–∞–∫–∂–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram. "
        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ–≤–µ—Ä—è–µ—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫—É –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π.", False), 'html'),
        reply_markup=IM().add(IB(('–í—Å–µ —Ä–∞–≤–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ!)'), callback_data=format_callback(app, download_anyway, url=url)
    )))], cache_time=0)

async def alert_dmf_cant_check(app, i, file_path, name):
    await app.bot.answer_inline_query(i.id, [RArticle(0, '.', TMC(
        b("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–¥—É–ª—å –Ω–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å! "
        "–§–∞–π–ª –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã. "
        "–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è –º–æ–≥—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —É–≥—Ä–æ–∑—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∞ —Ç–∞–∫–∂–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram. "
        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ–≤–µ—Ä—è–µ—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫—É –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π.", False), 'html'),
        reply_markup=IM().add(IB(('–í—Å–µ —Ä–∞–≤–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ!)'), callback_data=format_callback(app, download_anyway_dmf, file_path=file_path, name=name)
    )))], cache_time=0)

async def alert_dmf(app, i, file_path, name):
    await app.bot.answer_inline_query(i.id, [RArticle(0, '.', TMC(
        b("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ –∏ –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å! "
        "–§–∞–π–ª –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã. "
        "–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è –º–æ–≥—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —É–≥—Ä–æ–∑—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∞ —Ç–∞–∫–∂–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram. "
        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ–≤–µ—Ä—è–µ—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫—É –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π.", False), 'html'),
        reply_markup=IM().add(IB(('–í—Å–µ —Ä–∞–≤–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ!)'), callback_data=format_callback(app, download_anyway_dmf, file_path=file_path, name=name)
    )))], cache_time=0)

async def dml(app, msg, notify, url, no_alert=False):

    if not no_alert:
        if urlparse(url).netloc not in DML_WHITELIST:
            r = await app.get_inline_bot_results(app.bot_username, format_callback(app, alert, url=url))
            await msg.reply_inline_bot_result(r.query_id, "0", False)
            await msg.delete()
            return
    try:
        r = requests.get(url, stream=True, timeout=DML_TIMEOUT)
        if 'Content-Disposition' in r.headers:
            filename = r.headers['Content-Disposition'].split('filename=')[-1].strip('";')
        else:
            await notify("<emoji id='5240241223632954241'>üö´</emoji> –û—à–∏–±–∫–∞! –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ª–∏–±–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω!")
            return

        if not filename.endswith('.rimtub-module'):
            await notify("<emoji id='5240241223632954241'>üö´</emoji> –û—à–∏–±–∫–∞! –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º –º–æ–¥—É–ª—è RimTUB!")
            return

        save_path = f'plugins/ModuleHelper/{filename}'
        with open(save_path, 'wb') as file:
            for chunk in r.iter_content(chunk_size=8192):
                file.write(chunk)

        unpack_module(save_path, f'plugins/{os.path.splitext(filename)[0]}/')
        os.remove(save_path)
        
        await app.load_module(os.path.splitext(filename)[0], restart=True, exception=True, all_clients=True)

        for client in clients:
            r = await client._start_on_ready(os.path.splitext(filename)[0])
            if r[0] == 'error':
                raise r[1]

        await notify(f"<emoji id=5206607081334906820>‚úÖ</emoji> –ú–æ–¥—É–ª—å <b>{os.path.splitext(filename)[0]}</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

    except requests.exceptions.RequestException as e:
        await notify(
            b(f"<emoji id='5240241223632954241'>üö´</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! {escape(e.__class__.__name__)}.\n", False)
            + f"–í–æ–∑–º–æ–∂–Ω–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–∞ –ª–∏–±–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É"
        )  
    except Exception as e:
        await notify(
            b(f"<emoji id='5240241223632954241'>üö´</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {escape(e.__class__.__name__)}:\n", False)
            + escape(e) + f"\n{await paste(format_exc())}"
        )

async def dmf(app: Client, msg, notify, file_path, name, no_alert=False):
    if not no_alert:
        with open(file_path, 'rb') as f:
            data = f.read()
        hash = hashlib.sha256(data).hexdigest()
        try:
            raise ... # this check does not work anyway
            r = requests.get(CHECK_HASH_URL.format(hash=hash), timeout=DMF_TIMEOUT)
        except Exception:
            r = await app.get_inline_bot_results(app.bot_username, format_callback(app, alert_dmf_cant_check, file_path=file_path, name=name))
            await msg.reply_inline_bot_result(r.query_id, "0", False)
            await msg.delete()
            return
        if not r.json()['exists']:
            r = await app.get_inline_bot_results(app.bot_username, format_callback(app, alert_dmf, file_path=file_path, name=name))
            await msg.reply_inline_bot_result(r.query_id, "0", False)
            await msg.delete()
            return 
        return
    try:
        isset = os.path.exists(f'plugins//{name}')
        unpack_module(file_path, f'plugins/{name}/')
        os.remove(file_path)
        await app.load_module(name, restart=isset, exception=True, all_clients=True)    

        for client in clients:
            r = await client._start_on_ready(name)
            if r[0] == 'error':
                raise r[1]

        try:
            cap = bq(
                build_module_help_text(
                    helplist.get_module(
                        name,
                    ), False
                ), True, False
            )
            
        except:
            cap = ''
        if isset:
            return await notify("<emoji id='5206607081334906820'>‚úÖ</emoji> –ú–æ–¥—É–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!" + "\n\n" + cap)
        await notify(
            "<emoji id='5206607081334906820'>‚úÖ</emoji> –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω!" + "\n\n" + cap
        )
    except Exception as e:
        await notify(
            b(f"<emoji id='5240241223632954241'>üö´</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{await paste(format_exc())}", False)
        )


async def main(app: Client):

    cmd = app.cmd(app.get_group(__package__))

    @cmd(['dmf'])
    async def _dmf(_, msg: Message):
        try:
            if r:= msg.reply_to_message:
                if r.document:
                    if r.document.mime_type in ('application/zip') and r.document.file_name.endswith('.rimtub-module'):
                        pass
                    else:
                        return await msg.edit("<emoji id='5210952531676504517'>‚ùå</emoji> –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥—É–ª–µ–º!")
                else:
                    return await msg.edit("<emoji id='5210952531676504517'>‚ùå</emoji> –û—à–∏–±–∫–∞: –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–æ–¥—É–ª–µ–º!")
            else:
                return await msg.edit("<emoji id='5274099962655816924'>‚ùóÔ∏è</emoji> –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
            await msg.edit(
                "<emoji id='5386367538735104399'>‚åõ</emoji> –ó–∞–≥—Ä—É–∂–∞—é..."
            )

            name = r.document.file_name.split(".", 1)[0]
            path = await r.download(f'plugins//ModuleHelper//{r.document.file_name}')
            await dmf(app, msg, msg.edit, path, name)
            
        except:
            await msg.edit(f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å!\n{await paste(format_exc())}')
            raise

    @cmd(['dml'])
    async def _dml(_, msg: Message, url=None):
        try:
            url = msg.text.split(maxsplit=1)[1]
        except IndexError:
            await msg.edit("<emoji id='5447644880824181073'>‚ö†Ô∏è</emoji> –í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É!")
            return

        return await dml(app, msg, msg.edit, url, False)
        


    @cmd(['sm'])
    async def _sm(_, msg: Message):
        try:
            _, name = msg.text.split(maxsplit=1)
        except ValueError:
            return await msg.edit("<emoji id='5274099962655816924'>‚ùóÔ∏è</emoji> –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è!")

        module_path = find_directory(name, 'plugins', 1)

        if not module_path:
            return await msg.edit("<emoji id='5447644880824181073'>‚ö†Ô∏è</emoji> –¢–∞–∫–æ–π –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        cap = f"‚ùóÔ∏è–ú–æ–¥—É–ª—å –¢–û–õ–¨–ö–û –Ω–∞ @RimTUB –≤–µ—Ä—Å–∏–∏ 2.0 –∏ –≤—ã—à–µ‚ùóÔ∏è\n\n"
        try:
            cap += bq(
                build_module_help_text(helplist.get_module(name.lower(), lower=True), False),
                True, False
            )
        except: pass

        try:
            module_file = pack_module(module_path, f'plugins/ModuleHelper/{os.path.split(module_path)[-1]}.rimtub-module')
        except:
            print_exc()
            return await msg.edit(f"–£–ø—Å! –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–ø–∞–∫–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å!\n{await paste(format_exc())}")

        try:
            await msg.reply_document(module_file, caption=cap)
            await msg.delete()
        except:
            await msg.edit(f"<emoji id='5260293700088511294'>‚õîÔ∏è</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞!\n{await paste(format_exc())}")
        finally:
            os.remove(module_file)
            
    @cmd('delm')
    async def _delm(app, msg):
        try:
            _, name = msg.text.split(maxsplit=1)
        except ValueError:
            return await msg.edit("<emoji id='5274099962655816924'>‚ùóÔ∏è</emoji> –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è!")
        
        module_path = find_directory(name, 'plugins', 1)
        if not module_path:
            return await msg.edit("<emoji id='5447644880824181073'>‚ö†Ô∏è</emoji> –¢–∞–∫–æ–π –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
        shutil.rmtree(module_path)
        await app.stop_module(os.path.split(module_path)[-1], unload_help=True, all_clients=True)

        await msg.edit(
            f"<emoji id='5445267414562389170'>üóë</emoji> –ú–æ–¥—É–ª—å {b(os.path.split(module_path)[-1])} —É–¥–∞–ª–µ–Ω!"
        )


    @cmd('relm')
    async def _relm(app: Client, msg):
        module_name = msg.text.split(maxsplit=1)[1]
        try:
            module_path = find_directory(module_name, 'plugins', 1)
            if not module_path:
                return await msg.edit("<emoji id='5447644880824181073'>‚ö†Ô∏è</emoji> –¢–∞–∫–æ–π –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            name = os.path.basename(module_path)
            await app.load_module(name, restart=True, exception=True, all_clients=True)

            for client in clients:
                r = await client._start_on_ready(name)
                if r[0] == 'error':
                    raise r[1]

        except Exception as e:
            await msg.edit(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å!\n{await paste(format_exc())}')
            
        else:
            await msg.edit(f"<emoji id='5206607081334906820'>‚úÖ</emoji> –ú–æ–¥—É–ª—å {b(os.path.basename(module_path))} –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!")

    @cmd(['offm', 'stopm'])
    async def _offm(app: Client, msg):
        module_name = msg.text.split(maxsplit=1)[1]
        try:
            module_path = find_directory(module_name, 'plugins', 1)
            if not module_path:
                return await msg.edit("<emoji id='5447644880824181073'>‚ö†Ô∏è</emoji> –¢–∞–∫–æ–π –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            name = os.path.split(module_path)[-1]

            disabled_modules = await app.db.get('core.modules', 'disabled_modules', [])
            if name not in disabled_modules:
                await app.stop_module(name)
                disabled_modules.append(name)
                await app.db.set('core.modules', 'disabled_modules', disabled_modules)
        except Exception as e:
            await msg.edit(f'–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å!\n{await paste(format_exc())}')
        else:
            await msg.edit(f"<emoji id='5206607081334906820'>‚úÖ</emoji> –ú–æ–¥—É–ª—å {b(name)} –≤—ã–∫–ª—é—á–µ–Ω!")


    @cmd(['onm', 'startm'])
    async def _onm(app: Client, msg):
        module_name = msg.text.split(maxsplit=1)[1]
        try:
            module_path = find_directory(module_name, 'plugins', 1)
            if not module_path:
                return await msg.edit("<emoji id='5447644880824181073'>‚ö†Ô∏è</emoji> –¢–∞–∫–æ–π –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            name = os.path.split(module_path)[-1]

            
            disabled_modules: list = await app.db.get('core.modules', 'disabled_modules', [])
            if name in disabled_modules:
                await app.load_module(name, restart=False, exception=True)
                disabled_modules.remove(name)
                await app.db.set('core.modules', 'disabled_modules', disabled_modules)

        except Exception as e:
            await msg.edit(f'–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å!\n{await paste(format_exc())}')
            print_exc(e.__traceback__)
        else:
            await msg.edit(f"<emoji id='5206607081334906820'>‚úÖ</emoji> –ú–æ–¥—É–ª—å {b(name)} –≤–∫–ª—é—á–µ–Ω!")

    @cmd(['offms'])
    async def _offms(app: Client, msg):
        disabled_modules = await app.db.get('core.modules', 'disabled_modules', [])
        if not disabled_modules:
            t = '–ù–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π!'
        else:
            t = f'–í—ã–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏: {",  ".join(map(code, disabled_modules))}'
        await msg.edit(t + f"\n\n–ß—Ç–æ–±—ã –≤—ã–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å –∏—Å–ø–æ–ª—å–∑—É–π {code(PREFIX+'offm')}\xa0[–ù–∞–∑–≤–∞–Ω–∏–µ\xa0–º–æ–¥—É–ª—è].\n"
                       f"–ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å: {code(PREFIX+'onm')}\xa0[–ù–∞–∑–≤–∞–Ω–∏–µ\xa0–º–æ–¥—É–ª—è]")