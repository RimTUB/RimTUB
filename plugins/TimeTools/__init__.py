import time
import asyncio
from datetime import datetime

from pytimeparse2 import parse

from utils import *


__libs__ = ('pytz', 'pytz==2024.2'), ('timezonefinder', 'timezonefinder==6.5.2'), ('geopy', 'geopy==2.4.1')


helplist.add_module(
    HModule(
        __package__,
        description="–†–∞–±–æ—Ç–∞ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º\n\n* - –ø—Ä–∏–º–µ—Ä—ã —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: 25s, 1d, 1h30m, 7d4s\n\n–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤–∫–ª—é—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É –ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞!",
        author='built-in (@RimMirK)',
        version='1.0.1'
    ).add_command(
        Command(['timer'], [Argument('–≤—Ä–µ–º—è*'), Argument("–¢–µ–∫—Å—Ç —ç—Ç–∏–∫–µ—Ç–∫–∏", False)], '–ó–∞–≤–µ—Å—Ç–∏ —Ç–∞–π–º–µ—Ä')
    ).add_command(
        Command(['timers'], [], '–°–ø–∏—Å–æ–∫ —Ç–∞–π–º–µ—Ä–æ–≤')
    ).add_command(
        Command(['stoptimer'], [Argument('ID –¢–∞–π–º–µ—Ä–∞')], '–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä')
    ).add_command(
        Command(['gettime'], [Argument("–ì–æ—Ä–æ–¥")], '–£–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è –≤ –≥–æ—Ä–æ–¥–µ')
    )
)

async def worker(app, mod):
    while True:
        timers: list[dict] = await mod.db.get('timers', [])
        for timer in timers:
            if timer['time'] <= time.time():
                await app.bot.send_message(app.me.id, f"‚è∞ –¢–∞–π–º–µ—Ä –Ω–∞ {b(sec_to_str(timer['during']))}!\n\n" + timer.get('text', ''))
                timers.remove(timer)
                await mod.db.set('timers', timers)
        await asyncio.sleep(1)


async def main(app: Client, mod: Module):

    import pytz
    from timezonefinder import TimezoneFinder
    from geopy.geocoders import Nominatim

    cmd = mod.cmd

    mod.add_task(worker(app, mod))

    @cmd(['timers'])
    async def _timers(app: Client, msg):
        timers: list[dict] = await mod.db.get('timers', [])
        o = b("–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã:\n\n")
        for timer in timers:
            o += f"ü™™ ID: {code(timer['id'])}\n"
            o += f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {b(sec_to_str(timer['during']))}\n"
            o += f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: {b(sec_to_str( timer['time'] - time.time() ))}\n"
            o += b("ü™ß –¢–µ–∫—Å—Ç —ç—Ç–∏–∫–µ—Ç–∫–∏: ") + timer.get('text', '-') + "\n"
            o += code('¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑') + "\n"
        
        await msg.edit(o)


    @cmd(['timer'])
    async def _timer(app: Client, msg):
        if len(msg.command) == 1:
            return await msg.edit(f"<emoji id='5240241223632954241'>üö´</emoji> –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö!")
        
        text = msg.text.split(maxsplit=2)[-1] if len(msg.command) > 2 else ""
        str_time = msg.command[1]
        sec_time = parse(str_time)
        if sec_time is None:
            return await msg.edit(f"<emoji id='5240241223632954241'>üö´</emoji> –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö!")
        timers: list[dict] = await mod.db.get('timers', [])
        timer = {}
        timer['time'] = time.time() + sec_time
        timer['during'] = sec_time
        if len(timers) == 0:
            timer['id'] = 1
        else:
            timer['id'] = timers[-1]['id'] + 1
        if text:
            timer['text'] = text
        timers.append(timer)
        await mod.db.set('timers', timers)
        await msg.edit(
            f"<emoji id='5413704112220949842'>‚è∞</emoji> –¢–∞–π–º–µ—Ä {timer['id']} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {b(sec_to_str(sec_time))}\n"
            + ((b("–¢–µ–∫—Å—Ç —ç—Ç–∏–∫–µ—Ç–∫–∏: ") + text) if text else '')
        )


    @cmd(['stoptimer'])
    async def _stoptimer(app, msg):
        if len(msg.command) != 2:
            return await msg.edit(f"<emoji id='5240241223632954241'>üö´</emoji> –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö!")

        try: timer_id = int(msg.command[1])
        except ValueError: return await msg.edit(f"<emoji id='5240241223632954241'>üö´</emoji> –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö!\n–í–≤–µ–¥–∏ —á–∏—Å–ª–æ!")
        
        timers = await mod.db.get('timers', [])
        
        success = False
        
        for timer in timers:
            if timer['id'] == timer_id:
                timers.remove(timer)
                success = True
                break
        
        if success:
            await mod.db.set('timers', timers)
            return await msg.edit(f"<emoji id='5206607081334906820'>‚úÖ</emoji> –¢–∞–π–º–µ—Ä {b(timer_id)} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        return await msg.edit(f"<emoji id='5210952531676504517'>‚ùå</emoji> –¢–∞–π–º–µ—Ä {b(timer_id)} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    def convert_to_time(number):
        sign = '+' if number >= 0 else '-'
        abs_number = abs(number)

        hours = int(abs_number)
        minutes = round((abs_number - hours) * 60)

        return f"{sign}{hours}:{minutes:02d}" if minutes else f"{sign}{hours}"

    @cmd(['gettime'])
    async def _gettime(app, msg):
        if len(msg.command) == 1:
            return await msg.edit(f"<emoji id='5240241223632954241'>üö´</emoji> –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö!")
        
        await msg.edit("<emoji id='5231012545799666522'>üîç</emoji> –ò—â—É –í–∞—à –≥–æ—Ä–æ–¥...")
        
        town = msg.text.split(maxsplit=1)[1]

        geolocator = Nominatim(user_agent="timezone_finder")
        location = geolocator.geocode(town)
        if location is None:
            return await msg.edit(f"<emoji id='5210952531676504517'>‚ùå</emoji> –ì–æ—Ä–æ–¥ {b(town)} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        tf = TimezoneFinder()
        timezone_str = tf.timezone_at(lng=location.longitude, lat=location.latitude)
        timezone = pytz.timezone(timezone_str)
        current_time = datetime.now(timezone)
        utc_offset = pnum(current_time.utcoffset().total_seconds() / 3600)
        utc_offset = convert_to_time(utc_offset)
        str_time = current_time.strftime('%Y.%m.%d\xa0%H:%M')
        await msg.edit(f"<emoji id='5397782960512444700'>üìå</emoji> –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –≥–æ—Ä–æ–¥–µ {b(town)} {i(f'({timezone_str}, UTC{utc_offset})')}: {b(str_time)}")

        